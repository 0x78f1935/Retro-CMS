# encoding: utf-8
"""
HTTP Status codes
-----------------
This file is backported from Python 3.5 http built-in module.

--=- generated by flask-install: https://github.com/0x78f1935/flask-install -=--
"""
from flask_marshmallow import base_fields, Schema


class HTTPStatus(object):
    """HTTP status codes and reason phrases"""
    SUCCESS = 200
    UNAUTHORIZED = 401
    FORBIDDEN = 403
    NOT_FOUND = 404
    UNPROCESSABLE_ENTITY = 422
    INTERNAL_SERVER_ERROR = 500
    SERVICE_UNAVAILABLE = 503


class HTTPSchemas(object):
    class Success(Schema):
        """Equivalent to code 200"""
        class Meta:
            ordered = True

        code = base_fields.Int(description="The status code of the request.", example=200, default=200, missing=200)
        status = base_fields.Str(description="The status of the request.", example='Ok', default='Ok', missing='Ok')
        status = base_fields.Str(
            description='The status of the request.',
            example='Ok',
            missing='Ok',
            default='Ok'
        )
        message = base_fields.Str(
            description='A generic response message. Contains some information on the request itself.',
            example='The request has succeeded',
            missing='The request has succeeded',
            default='The request has succeeded'
        )

    class Unauthorized(Schema):
        """Equivalent to code 401"""
        class Meta:
            ordered = True

        code = base_fields.Int(description="The status code of the request.", example=401, default=401, missing=401)
        status = base_fields.Str(
            description='The status of the request.',
            example='Unauthorized',
            missing='Unauthorized',
            default='Unauthorized'
        )
        message = base_fields.Str(
            description='A generic response message. Contains some information on the request itself.',  # noqa: E501
            example=str(
                'The client request has not been completed because it lacks valid authentication credentials for the'
                'requested resource'
            ),
            missing=str(
                'The client request has not been completed because it lacks valid authentication credentials for the'
                'requested resource'
            ),
            default=str(
                'The client request has not been completed because it lacks valid authentication credentials for the'
                'requested resource'
            )
        )
        errors = base_fields.Dict(
            description="Key, Value error messages which provide more details on the error itself.",
            example={"token": ['expired']}
        )

    class Forbidden(Schema):
        """Equivalent to code 403"""
        class Meta:
            ordered = True

        code = base_fields.Int(description="The status code of the request.", example=403, default=403, missing=403)
        status = base_fields.Str(
            description='The status of the request.',
            example='Forbidden',
            missing='Forbidden',
            default='Forbidden'
        )
        message = base_fields.Str(
            description='A generic response message. Contains some information on the request itself.',
            example='The server understands the request but refuses to authorize it',
            missing='The server understands the request but refuses to authorize it',
            default='The server understands the request but refuses to authorize it'
        )
        errors = base_fields.Dict(
            description="Key, Value error messages which provide more details on the error itself.",
            example={"authentication": ["Access denied to resource"]}
        )

    class NotFound(Schema):
        """Equivalent to code 404"""
        class Meta:
            ordered = True

        code = base_fields.Int(description="The status code of the request.", example=404, default=404, missing=404)
        status = base_fields.Str(
            description='The status of the request.',
            example='Not Found',
            missing='Not Found',
            default='Not Found'
        )
        message = base_fields.Str(
            description='A generic response message. Contains some information on the request itself.',
            example='The server cannot find the requested resource',
            missing='The server cannot find the requested resource',
            default='The server cannot find the requested resource'
        )
        errors = base_fields.Dict(
            description="Key, Value error messages which provide more details on the error itself.",
            example={'user': ['Not found']}
        )

    class UnprocessableEntry(Schema):
        """Equivalent to code 422"""
        class Meta:
            ordered = True

        code = base_fields.Int(description="The status code of the request.", example=422, default=422, missing=422)
        status = base_fields.Str(
            description='The status of the request.',
            example='Unprocessable Entity',
            missing='Unprocessable Entity',
            default='Unprocessable Entity'
        )
        message = base_fields.Str(
            description='A generic response message. Contains some information on the request itself.',
            example=str(
                'The server understands the content type of the request entity, and the syntax of the request entity'
                'is correct, but it was unable to process the contained instructions'
            ),
            missing=str(
                'The server understands the content type of the request entity, and the syntax of the request entity'
                'is correct, but it was unable to process the contained instructions'
            ),
            default=str(
                'The server understands the content type of the request entity, and the syntax of the request entity'
                'is correct, but it was unable to process the contained instructions'
            )
        )
        errors = base_fields.Dict(
            description="Key, Value error messages which provide more details on the error itself.",
            example={'foo': ['Missing', 'Required'], 'bar': ['Missing']}
        )

    class InternalServerError(Schema):
        """Equivalent to code 500"""
        class Meta:
            ordered = True

        code = base_fields.Int(description="The status code of the request.", example=500, default=500, missing=500)
        status = base_fields.Str(
            description='The status of the request.',
            example='Internal Server Error',
            missing='Internal Server Error',
            default='Internal Server Error'
        )
        message = base_fields.Str(
            description='A generic response message. Contains some information on the request itself.',
            example='The server encountered an unexpected condition that prevented it from fulfilling the request',
            missing='The server encountered an unexpected condition that prevented it from fulfilling the request',
            default='The server encountered an unexpected condition that prevented it from fulfilling the request'
        )
        errors = base_fields.Dict(
            description="Key, Value error messages which provide more details on the error itself.",
            example={'API': ['Unreachable']}
        )

    class ServiceUnavailable(Schema):
        """Equivalent to code 503"""
        class Meta:
            ordered = True

        code = base_fields.Int(description="The status code of the request.", example=503, default=503, missing=503)
        status = base_fields.Str(
            description='The status of the request.',
            example='Service Unavailable',
            missing='Service Unavailable',
            default='Service Unavailable'
        )
        message = base_fields.Str(
            description='A generic response message. Contains some information on the request itself.',
            example='The server is not ready to handle this request',
            missing='The server is not ready to handle this request',
            default='The server is not ready to handle this request'
        )
        errors = base_fields.Dict(
            description="Key, Value error messages which provide more details on the error itself.",
            example={'API': ['Unreachable']}
        )
