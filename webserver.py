# encoding: utf-8
"""
Webserver
---------
Entry point of the webserver, This file should be used in order to start the application.

--=- generated by flask-install: https://github.com/0x78f1935/flask-install -=--
"""
import signal
import os

from backend import Webserver
from backend.tasks import BackgroundThreadFactory
from backend.cli import register


def create_subprocesses(server: Webserver) -> None:
    """
    Attach background tasks to the webserver
    """
    for TASK in server.config["ENABLED_TASKS"]:
        setattr(server.config, f'TASK_{TASK[0]}', BackgroundThreadFactory.create(server, TASK[1]))
        _task = getattr(server.config, f'TASK_{TASK[0]}')
        # this condition is needed to prevent creating duplicated thread in Flask debug mode
        if server.config["RUN_LISTENERS"]:
            _task.start()

            original_handler = signal.getsignal(signal.SIGINT)

            def sigint_handler(signum, frame):
                _task.stop()

                # wait until thread is finished
                if _task.is_alive():
                    _task.join()

                original_handler(signum, frame)

            try:
                signal.signal(signal.SIGINT, sigint_handler)
            except ValueError as e:
                print(f'{e}. Continuing execution...')


def create_server() -> object:
    """
    This method is used to create a new server instance

    Returns:
        object: Application Webserver
    """
    server = Webserver()
    register(server)
    create_subprocesses(server)
    return server


app = create_server()


@app.shell_context_processor
def make_shell_context():
    """Register quick access Flask Shell with variables pre-initialized"""
    return {
        'app': app
    }
